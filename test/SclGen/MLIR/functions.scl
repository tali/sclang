// RUN: sclang-gen --emit=mlir %s | sclang-gen -x mlir --emit=mlir | FileCheck %s

// CHECK-LABEL: scl.function @callee_1
function callee_1 : int

var_input
  a : int;
end_var

begin

  callee_1 := a * 2;

end_function


// CHECK-LABEL: scl.function @caller_1
function caller_1 : int

begin

// CHECK-DAG: [[C1:%c1[_0-9]*]] = scl.constant 1 : i16
// CHECK-DAG: scl.call.fc @callee_1([[C1]]) {argNames = ["a"]} : (!scl.int) -> !scl.int
  caller_1 := callee_1(1);

end_function


// CHECK-LABEL: scl.function @callee_2
function callee_2 : int

var_input
  a : int;
  b : int;
end_var

begin

  callee_2 := a * 2 + b;

end_function


// CHECK-LABEL: scl.function @caller_2
function caller_2 : int

begin

// CHECK-DAG: [[C2:%c2[_0-9]*]] = scl.constant 2 : i16
// CHECK-DAG: [[C3:%c3[_0-9]*]] = scl.constant 3 : i16
// CHECK-DAG: scl.call.fc @callee_2([[C2]], [[C3]]) {argNames = ["a", "b"]} : (!scl.int, !scl.int) -> !scl.int
  caller_2 := callee_2(a:=2, b:=3);

end_function


// CHECK-LABEL: scl.function @caller_2_reorder
function caller_2_reorder : int

begin

// CHECK-DAG: [[C2:%c2[_0-9]*]] = scl.constant 2 : i16
// CHECK-DAG: [[C3:%c3[_0-9]*]] = scl.constant 3 : i16
// CHECK-DAG: scl.call.fc @callee_2([[C2]], [[C3]]) {argNames = ["a", "b"]} : (!scl.int, !scl.int) -> !scl.int
  caller_2_reorder := callee_2(b:=3, a:=2);

end_function
