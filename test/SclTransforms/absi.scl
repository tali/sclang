// RUN: sclang-gen --emit=mlir-std %s | FileCheck %s

// CHECK:      func @abs(%arg0: i16) -> i16
function abs : int

var_input
 in : int;
end_var;

begin

// CHECK: [[C0:%[_a-z0-9]+]] = arith.constant 0 : i16
// CHECK: memref.store %arg0, [[INVAR:%[0-9]+]][] : memref<i16>

// CHECK: [[IN:%[0-9]+]] = memref.load [[INVAR]]
// CHECK: [[LT:%[0-9]+]] = arith.cmpi slt, [[IN]], [[C0]]
// CHECK: scf.if [[LT]] {
  if in < int#0 then

// CHECK:   [[IN:%[0-9]+]] = memref.load [[INVAR]]
// CHECK:   [[NEG:%[0-9]+]] = arith.subi [[C0]], [[IN]] : i16
// CHECK:   memref.store [[NEG]], [[ABS:%[0-9]+]][] : memref<i16>
    abs := -in;

// CHECK: } else {
// CHECK:   [[IN:%[0-9]+]] = memref.load [[INVAR]]
// CHECK:   [[GT:%[0-9]+]] = arith.cmpi sgt, [[IN]], [[C0]]
// CHECK:   scf.if [[GT]] {
  elsif in > int#0 then

// CHECK:     [[IN:%[0-9]+]] = memref.load [[INVAR]]
// CHECK:     memref.store [[IN]], [[ABS]][] : memref<i16>
    abs := in;

// CHECK:   } else {
  else

// CHECK: memref.store [[C0]], [[ABS]][] : memref<i16>
    abs := int#0;

// CHECK:   }
// CHECK: }
  end_if;

// CHECK: [[RET:%[0-9]+]] = memref.load [[ABS]][] : memref<i16>
// CHECK: return [[RET]]
end_function
