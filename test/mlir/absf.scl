// RUN: sclang --emit=mlir %s | FileCheck %s

function abs : real
// CHECK:      func @abs(%arg0: f32) -> f32
// CHECK-NEXT:   [[RET:%[0-9]+]] = scl.tmpvar "abs" : memref<f32>

var_input
 in : real;
end_var;

begin
  if in < 0.0 then
// CHECK: [[C0:%[0-9]+]] = scl.constant 0.000000e+00 : f32
// CHECK: [[LT:%[0-9]+]] = scl.cmplt %arg0, [[C0]]
// CHECK: scl.if

    abs := -in;
// CHECK: [[NEG:%[0-9]+]] = scl.negate %arg0
// CHECK: scl.store [[RET]] : memref<f32> = [[NEG]]
// CHECK: scl.terminator

  elsif in > 0.0 then
// CHECK: [[C0:%[0-9]+]] = scl.constant 0.000000e+00 : f32
// CHECK: [[GT:%[0-9]+]] = scl.cmpgt %arg0, [[C0]]
// CHECK: scl.if

    abs := in;
// CHECK: scl.store [[RET]] : memref<f32> = %arg0
// CHECK: scl.terminator

  else

    abs := 0.0;
// CHECK: [[C0:%[0-9]+]] = scl.constant 0.000000e+00 : f32
// CHECK: scl.store [[RET]] : memref<f32> = [[C0]]
// CHECK: scl.terminator

  end_if;
end_function
