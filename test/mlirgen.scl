// RUN: sclang --emit=mlir %s 2>&1 | FileCheck %s
function abc : int
// CHECK: func @abc() -> i16 {

var
 a : INT := -1;
// CHECK-DAG: [[varA:%[0-9]+]] = scl.tmpvar "a" : memref<i16>
// CHECK-DAG: [[constA:%[0-9]+]] = scl.constant -1 : i16
// CHECK:     scl.store [[varA]] : memref<i16> = [[constA]] : i16

 b : INT := -2;
// CHECK-DAG: [[varB:%[0-9]+]] = scl.tmpvar "b" : memref<i16>
// CHECK-DAG: [[constB:%[0-9]+]] = scl.constant -2 : i16 : i16
// CHECK:     scl.store [[varB]] : memref<i16> = [[constB]] : i16

end_var;

begin
  if a < b then
// CHECK-DAG: [[lhs:%[0-9]+]] = scl.load %0 : memref<i16> : i16
// CHECK-DAG: [[rhs:%[0-9]+]] = scl.load %2 : memref<i16> : i16
// CHECK-DAG: [[cmp:%[0-9]+]] = scl.cmplt [[lhs]], [[rhs]] : i16
// CHECK:     "scl.if"([[cmp]]) ( {

    a := b * 5;
// CHECK-DAG:   [[valueB:%[+-9]+]] = scl.load [[varB]] : memref<i16> : i16
// CHECK-DAG:   [[const5:%[0-9]+]] = scl.constant 5 : i16 : i16
// CHECK-DAG:   [[mul5:%[0-9]+]] = scl.mul [[valueB]], [[const5]] : i16
// CHECK:       scl.store [[varA]] : memref<i16> = [[mul5]] : i16

  else
// CHECK:       scl.terminator
// CHECK:     },  {

    b := 2 + 3 * a;
// CHECK-DAG:   [[const2:%[0-9]+]] = scl.constant 2 : i16 : i16
// CHECK-DAG:   [[const3:%[0-9]+]] = scl.constant 3 : i16 : i16
// CHECK-DAG:   [[valueA:%[0-9]+]] = scl.load [[varA]] : memref<i16> : i16
// CHECK-DAG:   [[mul3:%[0-9]+]] = scl.mul [[const3]], [[valueA]] : i16
// CHECK-DAG:   [[add2:%[0-9]+]] = scl.add [[const2]], [[mul3]] : i16
// CHECK:       scl.store [[varB]] : memref<i16> = [[add2]] : i16

  end_if;
// CHECK-DAG:   scl.terminator
// CHECK:     }) : (i1) -> ()

  return;
// CHECK:     scl.return

end_function
